{"id":"src/shaders/fragment.glsl","dependencies":[{"name":"E:\\three.js - proj\\Parcel-three-template\\package.json","includedInParent":true,"mtime":1651558011518}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\n  uniform float time;\\n  uniform float progress;\\n\\n  uniform sampler2D landscape;\\n  uniform vec4 resolution;\\n  \\n\\n  varying vec2 vUv;\\n  varying vec3 vPosition;\\n  varying vec3 vNormal;\\n  varying vec3 eyeVector;\\n\\n  vec2 hash22(vec2 p) {\\n    p = fract(p * vec2(5.3983, 5.4427));\\n    p += dot(p, p.yx + vec2(21.5351, 14.3137));\\n    return fract(vec2(p.x * p.y * 95.4337, p.x + p.y * 97.587));\\n  }\\n\\n  void main() {\\n\\n   vec3 X = dFdx(vNormal);\\n   vec3 Y = dFdy(vNormal);\\n   vec3 normal = normalize(cross(X, Y));\\n   float diffuse = dot(normal, vec3(1.));\\n   vec2 rand = hash22(vec2(floor(diffuse * 10.))); \\n   vec2 uvu = vec2(\\n      sign(rand.x - 0.5) * 1. + ( rand.x - 0.5 ) * .4, \\n      sign(rand.y - 0.5) * 1. + ( rand.y - 0.5 ) * .4\\n    );\\n\\n   vec2 uv = uvu * gl_FragCoord.xy/vec2(1000.);\\n\\n   vec3 refracted = refract(eyeVector, normal, 1./3.);\\n   uv += refracted.xy;\\n\\n   vec4 t = texture2D(landscape, uv);\\n\\n   gl_FragColor = t;\\n  //  gl_FragColor = vec4(eyeVector, 1.);\\n\\n  }\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"src/shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"src/shaders/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"src/shaders/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"src/shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"src/shaders/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1049},"source":"src/shaders/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"src/shaders/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\n  uniform float time;\\n  uniform float progress;\\n\\n  uniform sampler2D landscape;\\n  uniform vec4 resolution;\\n  \\n\\n  varying vec2 vUv;\\n  varying vec3 vPosition;\\n  varying vec3 vNormal;\\n  varying vec3 eyeVector;\\n\\n  vec2 hash22(vec2 p) {\\n    p = fract(p * vec2(5.3983, 5.4427));\\n    p += dot(p, p.yx + vec2(21.5351, 14.3137));\\n    return fract(vec2(p.x * p.y * 95.4337, p.x + p.y * 97.587));\\n  }\\n\\n  void main() {\\n\\n   vec3 X = dFdx(vNormal);\\n   vec3 Y = dFdy(vNormal);\\n   vec3 normal = normalize(cross(X, Y));\\n   float diffuse = dot(normal, vec3(1.));\\n   vec2 rand = hash22(vec2(floor(diffuse * 10.))); \\n   vec2 uvu = vec2(\\n      sign(rand.x - 0.5) * 1. + ( rand.x - 0.5 ) * .4, \\n      sign(rand.y - 0.5) * 1. + ( rand.y - 0.5 ) * .4\\n    );\\n\\n   vec2 uv = uvu * gl_FragCoord.xy/vec2(1000.);\\n\\n   vec3 refracted = refract(eyeVector, normal, 1./3.);\\n   uv += refracted.xy;\\n\\n   vec4 t = texture2D(landscape, uv);\\n\\n   gl_FragColor = t;\\n  //  gl_FragColor = vec4(eyeVector, 1.);\\n\\n  }\\n\";"},"lineCount":null}},"error":null,"hash":"7bbe5119833dac9e9707f7bd220c8d34","cacheData":{"env":{}}}